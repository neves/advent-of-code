class MapCounter {
  map: Record<string, number> = {};
  add(key: string) {
    this.map[key] = (this.map[key] ?? 0) + 1;
  }

  filterCount(fn: (count: number) => boolean) {
    return Object.fromEntries(
      Object.entries(this.map).filter(([_, count]) => fn(count)),
    );
  }
}

const map = new MapCounter();

function changeStone(stone: string): string[] {
  map.add(stone);
  if (stone === "0") return ["1"];
  if (stone.length % 2 === 0) {
    return [
      stone.substring(0, stone.length / 2),
      Number(stone.substring(stone.length / 2)).toString(),
    ];
  }
  return [(Number(stone) * 2024).toString()];
}

// deno-fmt-ignore 45
const caches: Record<string, number[]> = {
  //  "0": [1,1,2,4,4,7,14,16,20,39,62,81,110,200,328,418,667,1059,1546,2377,3572,5602,8268,12343,19778,29165,43726,67724,102131,156451,234511,357632,549949,819967,1258125,1916299,2886408,4414216,6669768,10174278,15458147,23333796,35712308,54046805],
  // "1": [1,2,4,4,7,14,16,20,39,62,81,110,200,328,418,667,1059,1546,2377,3572,5602,8268,12343,19778,29165,43726,67724,102131,156451,234511,357632,549949,819967,1258125,1916299,2886408,4414216,6669768,10174278,15458147,23333796,35712308,54046805,81997335],
  // "2": [1,2,4,4,6,12,16,19,30,57,92,111,181,295,414,661,977,1501,2270,3381,5463,7921,11819,18712,27842,42646,64275,97328,150678,223730,343711,525238,784952,1208065,1824910,2774273,4230422,6365293,9763578,14777945,22365694,34205743,51643260,78678894],
  // "3": [1,2,4,4,5,10,16,26,35,52,79,114,202,294,401,642,987,1556,2281,3347,5360,7914,12116,18714,27569,42628,64379,98160,150493,223231,344595,524150,788590,1210782,1821382,2779243,4230598,6382031,9778305,14761601,22417792,34225846,51690137,78827911],
  // "4": [1,2,4,4,4,8,16,27,30,47,82,115,195,269,390,637,951,1541,2182,3204,5280,7721,11820,17957,26669,41994,62235,95252,146462,216056,336192,508191,766555,1178119,1761823,2709433,4110895,6188994,9515384,14316637,21807800,33255984,50149950,76709712],
  // "5": [1,1,2,4,8,8,11,22,32,45,67,109,163,223,383,597,808,1260,1976,3053,4529,6675,10627,15847,23822,37090,55161,84208,128121,194545,298191,444839,681805,1042629,1565585,2396146,3626619,5509999,8396834,12678459,19375816,29353796,44468482,67897697],
  // "6": [1,1,2,4,8,8,11,22,32,54,68,103,183,250,401,600,871,1431,2033,3193,4917,7052,11371,16815,25469,39648,57976,90871,136703,205157,319620,473117,727905,1110359,1661899,2567855,3849988,5866379,8978479,13464170,20675981,31260715,47355277,72483044],
  // "7": [1,1,2,4,8,8,11,22,32,52,72,106,168,242,413,602,832,1369,2065,3165,4762,6994,11170,16509,25071,39034,57254,88672,134638,203252,312940,465395,716437,1092207,1637097,2519878,3794783,5771904,8814021,13273744,20328089,30742356,46604985,71251415],
  // "8": [1,1,2,4,7,7,11,22,31,48,69,103,161,239,393,578,812,1322,2011,3034,4580,6798,10738,16018,24212,37525,55534,85483,130183,196389,301170,450896,691214,1054217,1583522,2428413,3669747,5573490,8505207,12835708,19605147,29704486,45028011,68747690],
  // "9": [1,1,2,4,8,8,11,22,32,54,70,103,183,262,419,586,854,1468,2131,3216,4888,7217,11617,17059,25793,40124,58820,92114,139174,208558,322818,480178,740365,1126352,1685448,2602817,3910494,5953715,9102530,13675794,20970437,31705673,48074246,73537869]
  "0": [1,1,2,4,4,7,14,16,20,39,62,81,110,200,328,418,667,1059,1546,2377,3572,5602,8268,12343,19778,29165,43726,67724,102131,156451,234511,357632,549949,819967,1258125,1916299,2886408,4414216,6669768,10174278,15458147,23333796,35712308,54046805,81997335,125001266,189148778,288114305,437102505,663251546,1010392024,1529921658,2327142660,3537156082,5362947711,8161193535,12380334344,18810542532,28593873985,43369895096,65961219181,100139236592,152044639077,231153279853,350788203951,533109439771,809736749749,1229368413225,1868593299929,2836699741490,4309440263048,6547241478879,9940362821695,15104984244538,22938365706844],
  "1": [1,2,4,4,7,14,16,20,39,62,81,110,200,328,418,667,1059,1546,2377,3572,5602,8268,12343,19778,29165,43726,67724,102131,156451,234511,357632,549949,819967,1258125,1916299,2886408,4414216,6669768,10174278,15458147,23333796,35712308,54046805,81997335,125001266,189148778,288114305,437102505,663251546,1010392024,1529921658,2327142660,3537156082,5362947711,8161193535,12380334344,18810542532,28593873985,43369895096,65961219181,100139236592,152044639077,231153279853,350788203951,533109439771,809736749749,1229368413225,1868593299929,2836699741490,4309440263048,6547241478879,9940362821695,15104984244538,22938365706844,34840149002654],
  "2": [1,2,4,4,6,12,16,19,30,57,92,111,181,295,414,661,977,1501,2270,3381,5463,7921,11819,18712,27842,42646,64275,97328,150678,223730,343711,525238,784952,1208065,1824910,2774273,4230422,6365293,9763578,14777945,22365694,34205743,51643260,78678894,119550250,181040219,276213919,417940971,635526775,967190364,1464254721,2230181584,3383369064,5136784035,7815929513,11846276236,18021119171,27366673929,41525589303,63172165494,95834918754,145631430697,221285376505,335810508406,510578405753,775057917791,1177233081218,1789105460648,2715548351448,4126944742410,6267603928109,9517722204783,14463411318409,21959000077642,33361879939123],
  "3": [1,2,4,4,5,10,16,26,35,52,79,114,202,294,401,642,987,1556,2281,3347,5360,7914,12116,18714,27569,42628,64379,98160,150493,223231,344595,524150,788590,1210782,1821382,2779243,4230598,6382031,9778305,14761601,22417792,34225846,51690137,78827911,119542610,181315830,276460158,418258991,636641443,967436144,1466002423,2232993017,3385449247,5144151283,7821403715,11858275227,18043579638,27385205762,41578776877,63230023120,95919165597,145810654517,221464625286,336184217342,511098463417,775739293861,1178609585462,1790704917622,2718330612121,4131363673883,6273232027849,9528181900890,14477384086838,21980614313123,33397574184836],
  "4": [1,2,4,4,4,8,16,27,30,47,82,115,195,269,390,637,951,1541,2182,3204,5280,7721,11820,17957,26669,41994,62235,95252,146462,216056,336192,508191,766555,1178119,1761823,2709433,4110895,6188994,9515384,14316637,21807800,33255984,50149950,76709712,116004670,176169842,268815408,405925411,618986605,939523808,1424046245,2170908709,3286453556,4999818380,7599067248,11516149089,17538646495,26595346202,40399586486,61439053769,93157147262,141707341785,215121357662,326594116560,496648284472,753474466137,1145237350863,1739662144358,2640672818870,4014395018228,6093717587578,9257463114209,14065709226166,21352521089525,32450231489345],
  "5": [1,1,2,4,8,8,11,22,32,45,67,109,163,223,383,597,808,1260,1976,3053,4529,6675,10627,15847,23822,37090,55161,84208,128121,194545,298191,444839,681805,1042629,1565585,2396146,3626619,5509999,8396834,12678459,19375816,29353796,44468482,67897697,102728207,156270923,237448520,359945119,548404180,830902728,1262810287,1920773112,2910904745,4429562772,6723617334,10208238298,15523686504,23546156396,35800677601,54373596862,82527381401,125485168005,190450830578,289353664282,439635296562,667354407235,1014322133136,1540093078996,2339196397813,3554443567139,5396279119470,8199376885602,12453343570608,18912305922966,28735448607417],
  "6": [1,1,2,4,8,8,11,22,32,54,68,103,183,250,401,600,871,1431,2033,3193,4917,7052,11371,16815,25469,39648,57976,90871,136703,205157,319620,473117,727905,1110359,1661899,2567855,3849988,5866379,8978479,13464170,20675981,31260715,47355277,72483044,109181845,166707433,253134047,382914632,585166040,884539345,1345613788,2047645435,3098356892,4724206377,7160643536,10872985370,16552155417,25070272242,38158143567,57933790448,87899668107,133766380622,202834276931,308334249199,468500329699,710790290058,1081062428072,1640664018003,2492210120859,3787836798694,5748162028732,8737608441604,13268147991514,20148203460634,30621612661601],
  "7": [1,1,2,4,8,8,11,22,32,52,72,106,168,242,413,602,832,1369,2065,3165,4762,6994,11170,16509,25071,39034,57254,88672,134638,203252,312940,465395,716437,1092207,1637097,2519878,3794783,5771904,8814021,13273744,20328089,30742356,46604985,71251415,107529561,163892525,248939400,377032515,575197697,870467992,1323890750,2013655038,3049406611,4645433144,7045685002,10698321736,16276414188,24671676894,37533047662,56988774248,86488411300,131561415506,199575001348,303311548004,460837978219,699372964501,1063331414844,1614094135973,2451830128654,3725902804244,5655408093234,8595002059570,13052617650290,19822054252432,30121450842288],
  "8": [1,1,2,4,7,7,11,22,31,48,69,103,161,239,393,578,812,1322,2011,3034,4580,6798,10738,16018,24212,37525,55534,85483,130183,196389,301170,450896,691214,1054217,1583522,2428413,3669747,5573490,8505207,12835708,19605147,29704486,45028011,68747690,103934296,158185825,240410770,364289594,555105869,841069902,1278299521,1944190437,2946226464,4484326329,6805591722,10332097590,15714538160,23833683818,36238383740,55037373871,83534994701,127024485591,192770563390,292891568245,445020687753,675489979403,1026733290935,1558911226168,2367783267114,3597921540463,5462124639438,8299712231826,12605551395981,19143219233647,29087020205323],
  "9": [1,1,2,4,8,8,11,22,32,54,70,103,183,262,419,586,854,1468,2131,3216,4888,7217,11617,17059,25793,40124,58820,92114,139174,208558,322818,480178,740365,1126352,1685448,2602817,3910494,5953715,9102530,13675794,20970437,31705673,48074246,73537869,110811935,169092081,256830213,388727714,593534295,897592763,1365513047,2077309718,3144423073,4792957707,7266163233,11033309991,16792025848,25442648670,38716940493,58780298247,89198234571,135718181667,205824986739,312858253566,475352922955,721283109638,1096862549472,1664773930182,2528876426307,3843251145519,5832794158307,8865669337036,13462884780433,20444566374734,31069966778992]
}

function blink(stones: string[]): string[] {
  return stones.flatMap((stone) => changeStone(stone));
}
const newCache = new Array(75);
let usedCache = 0;
let noCache = 0;
function decompose(stones: string[], blinks: number): number {
  if (blinks === 0) return stones.length;
  let size = 0;
  stones = stones.filter((stone) => {
    if (caches[stone] && blinks <= caches[stone].length) {
      usedCache++;
      size += caches[stone][blinks - 1];
      return false;
    }
    noCache++;
    return true;
  });
  // console.log(size, stones);
  stones = blink(stones);
  // console.log(stones);
  size += decompose(stones, blinks - 1);
  return size;
}

function decompose2(stone: string, blinks: number): number {
  if (blinks === 0) return 1;
  let size = 0;
  if (caches[stone] && blinks <= caches[stone].length) {
    size += caches[stone][blinks - 1];
  } else {
    const stones = changeStone(stone);
    for (const s of stones) {
      const ss = decompose2(s, blinks - 1);
      size += ss;
    }
    if (stone === "9") {
      caches[stone][blinks - 1] = size;
      // caches["0"][blinks - 1] = ss;
    }
  }

  return size;
}

// for (let blinks = 45; blinks <= 75; blinks++) {
//   decompose2("9", blinks);
//   // console.log(
//   //   decompose2("0", blinks),
//   //   // decompose(["8435", "234", "928434", "14", "0", "7", "92446", "8992692"], 75),
//   // );
// }
// console.log(JSON.stringify(caches["9"]), caches["9"].length);

const before = Date.now();
// console.log(decompose(["0"], 75));
console.log(
  decompose(["8435", "234", "928434", "14", "0", "7", "92446", "8992692"], 75),
);
console.log(Date.now() - before);
console.log(usedCache, noCache);

console.log(map.filterCount((count) => count > 40_000));
// console.log(Number.MAX_SAFE_INTEGER);
